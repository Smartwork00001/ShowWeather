(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>A});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,"#content{\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#getLocation {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  align-items: center;\n}\n\n.nav-bar{\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    margin: 0.5rem;\n    padding: 1rem 0;\n    border-top: 2px solid #4338ca;\n    border-bottom: 2px solid #4338ca;\n    width: 50%;\n}\n\n.form-input{\n  margin-top: 5%;\n  display: flex;\n  gap:1rem;\n}\n\n.weather-report {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  padding: 1rem;\n  background-color: #4281ee;\n  margin: 1rem;\n  border-radius: 1rem;\n  box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n  max-width: 40%;\n}\n\n.weather-report-wrapper {\n  display: grid;\n  grid-template-columns: 1fr 2fr;\n  padding: 1rem;\n  border-bottom: 2px solid #453986;\n}\n\n.temperature-wrapper {\n    cursor: pointer;\n    display: flex;\n    gap: 1rem;\n}\n\n.temperature-buttons{\n    display: grid;\n    grid-template-rows: 1fr 1fr;\n    gap: 0.5rem;\n}\n\n.temperature-buttons > .celsius, .temperature-buttons > .fahrenheit {\n    min-width: 2rem;\n    height: 2rem;\n    margin: 0;\n    padding: 0;\n}\n\n.input-text {\n  text-align: center;\n  width: 100%;\n  border: 0;\n  border-bottom: 2px solid gray;\n  outline: 0;\n  font-size: 1.3rem;\n  color: black;\n  padding: 4px 0;\n  background: transparent;\n  transition: border-color 0.2s;\n}\n\n.purple-button {\n  appearance: none;\n  background: #4338ca;\n  border: 0;\n  border-radius: 0.5rem;\n  color: #fff;\n  cursor: pointer;\n  font: inherit;\n  font-weight: 500;\n  line-height: 1;\n  padding: 1em 1.5em;\n  max-width: min-content;\n}\n\n.hidden {\n  display: none;\n}\n\n.medium-text {\n  font-size: 2rem;\n  font-weight: bold;\n}\n\n.small-text {\n  font-size: 1.2rem;\n  font-weight: 600;\n}\n\n.white-text {\n  color: #f0fdfa;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;EACT,mBAAmB;AACrB;;AAEA;IACI,aAAa;IACb,6BAA6B;IAC7B,mBAAmB;IACnB,cAAc;IACd,eAAe;IACf,6BAA6B;IAC7B,gCAAgC;IAChC,UAAU;AACd;;AAEA;EACE,cAAc;EACd,aAAa;EACb,QAAQ;AACV;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;EACT,aAAa;EACb,yBAAyB;EACzB,YAAY;EACZ,mBAAmB;EACnB,qDAAqD;EACrD,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,aAAa;EACb,gCAAgC;AAClC;;AAEA;IACI,eAAe;IACf,aAAa;IACb,SAAS;AACb;;AAEA;IACI,aAAa;IACb,2BAA2B;IAC3B,WAAW;AACf;;AAEA;IACI,eAAe;IACf,YAAY;IACZ,SAAS;IACT,UAAU;AACd;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,SAAS;EACT,6BAA6B;EAC7B,UAAU;EACV,iBAAiB;EACjB,YAAY;EACZ,cAAc;EACd,uBAAuB;EACvB,6BAA6B;AAC/B;;AAEA;EACE,gBAAgB;EAChB,mBAAmB;EACnB,SAAS;EACT,qBAAqB;EACrB,WAAW;EACX,eAAe;EACf,aAAa;EACb,gBAAgB;EAChB,cAAc;EACd,kBAAkB;EAClB,sBAAsB;AACxB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,eAAe;EACf,iBAAiB;AACnB;;AAEA;EACE,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,cAAc;AAChB",sourcesContent:["#content{\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#getLocation {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  align-items: center;\n}\n\n.nav-bar{\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    margin: 0.5rem;\n    padding: 1rem 0;\n    border-top: 2px solid #4338ca;\n    border-bottom: 2px solid #4338ca;\n    width: 50%;\n}\n\n.form-input{\n  margin-top: 5%;\n  display: flex;\n  gap:1rem;\n}\n\n.weather-report {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  padding: 1rem;\n  background-color: #4281ee;\n  margin: 1rem;\n  border-radius: 1rem;\n  box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n  max-width: 40%;\n}\n\n.weather-report-wrapper {\n  display: grid;\n  grid-template-columns: 1fr 2fr;\n  padding: 1rem;\n  border-bottom: 2px solid #453986;\n}\n\n.temperature-wrapper {\n    cursor: pointer;\n    display: flex;\n    gap: 1rem;\n}\n\n.temperature-buttons{\n    display: grid;\n    grid-template-rows: 1fr 1fr;\n    gap: 0.5rem;\n}\n\n.temperature-buttons > .celsius, .temperature-buttons > .fahrenheit {\n    min-width: 2rem;\n    height: 2rem;\n    margin: 0;\n    padding: 0;\n}\n\n.input-text {\n  text-align: center;\n  width: 100%;\n  border: 0;\n  border-bottom: 2px solid gray;\n  outline: 0;\n  font-size: 1.3rem;\n  color: black;\n  padding: 4px 0;\n  background: transparent;\n  transition: border-color 0.2s;\n}\n\n.purple-button {\n  appearance: none;\n  background: #4338ca;\n  border: 0;\n  border-radius: 0.5rem;\n  color: #fff;\n  cursor: pointer;\n  font: inherit;\n  font-weight: 500;\n  line-height: 1;\n  padding: 1em 1.5em;\n  max-width: min-content;\n}\n\n.hidden {\n  display: none;\n}\n\n.medium-text {\n  font-size: 2rem;\n  font-weight: bold;\n}\n\n.small-text {\n  font-size: 1.2rem;\n  font-weight: 600;\n}\n\n.white-text {\n  color: #f0fdfa;\n}\n"],sourceRoot:""}]);const A=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var A=0;A<this.length;A++){var c=this[A][0];null!=c&&(i[c]=!0)}for(var s=0;s<n.length;s++){var d=[].concat(n[s]);r&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),e.push(d))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],A=0;A<n.length;A++){var c=n[A],s=r.base?c[0]+r.base:c[0],d=a[s]||0,u="".concat(s," ").concat(d);a[s]=d+1;var p=t(u),l={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(l);else{var m=o(l,r);r.byIndex=A,e.splice(A,0,{identifier:u,updater:m,references:1})}i.push(u)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var A=t(a[i]);e[A].references--}for(var c=r(n,o),s=0;s<a.length;s++){var d=t(a[s]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}a=c}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),r=t(795),o=t.n(r),a=t(569),i=t.n(a),A=t(565),c=t.n(A),s=t(216),d=t.n(s),u=t(589),p=t.n(u),l=t(426),m={};m.styleTagTransform=p(),m.setAttributes=c(),m.insert=i().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=d(),e()(l.Z,m),l.Z&&l.Z.locals&&l.Z.locals;const f=()=>{const n=new Date;return`${n.getHours()}:${n.getMinutes()}:${n.getSeconds()}`},g=n=>{const e=1*n;return Math.round(100*(e-273.15)/100)},C=document.querySelector(".address"),h=document.querySelector(".date"),b=document.querySelector(".time"),E=document.querySelector(".wind"),x=document.querySelector(".humidity"),B=document.querySelector(".kelvin"),y=document.querySelector(".temperature"),v=document.querySelector(".description"),w=document.querySelector("#span-temperature"),S=(n,e)=>{C.textContent=e,h.textContent=(()=>{const n=new Date,e=n.toLocaleString("en-US",{month:"short"});return`${n.getDate()}, ${e} ${n.getFullYear()}`})(),b.textContent=f(),E.textContent=n.wind.speed,x.textContent=n.main.humidity,B.textContent=n.main.temp,y.textContent=g(n.main.temp),v.textContent=n.weather[0].description},I={method:"GET",headers:{"X-RapidAPI-Key":"6d4ac8eda5msh9b45e76cb759b23p136c80jsn7651fcc60bad","X-RapidAPI-Host":"address-from-to-latitude-longitude.p.rapidapi.com"}},k=async n=>{try{const e=await fetch(`https://address-from-to-latitude-longitude.p.rapidapi.com/geolocationapi?address=${n}`,I),t=(await e.json()).Results[0];return{lat:t.latitude,long:t.longitude}}catch(n){return n}},q=async(n,e)=>{const t=await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${n}&lon=${e}&appid=d71489546ede021d72f1f39fb19ad36b`);return await t.json()};let j="";const T=()=>j,L=document.querySelector("#submitLocation"),M=document.querySelector(".celsius"),U=document.querySelector(".fahrenheit"),D=document.querySelector(".refresh");L.addEventListener("click",(async function(n){n.preventDefault();const e=document.forms.getLocation,t=new FormData(e);var r;e.reset(),r=t.get("address"),j=r;const o=await k(t.get("address")),a=await q(o.lat,o.long);S(a,t.get("address"))})),M.addEventListener("click",(function(){y.textContent=g(B.textContent),w.textContent="Celsius"})),U.addEventListener("click",(function(){y.textContent=(n=>{const e=9*(1*n-273.15)/5+32;return Math.round(100*e/100)})(B.textContent),w.textContent="Fahrenheit"})),D.addEventListener("click",(async()=>{const n=await k(T()),e=await q(n.lat,n.long);S(e,T())})),setInterval((()=>{document.querySelector(".time").textContent=f()}),1e3)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,