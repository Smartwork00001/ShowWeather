(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>c});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,"#getLocation {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  align-items: center;\n}\n\n.nav-bar{\n    display: flex;\n    justify-content: space-around;\n    margin: 0.5rem;\n    padding: 1rem 0;\n    border-top: 2px solid #4338ca;\n    border-bottom: 2px solid #4338ca;\n}\n\n.weather-report {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  padding: 1rem;\n  background-color: antiquewhite;\n  margin: 1rem;\n  border-radius: 1rem;\n  box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n}\n\n.weather-report-wrapper {\n  display: grid;\n  grid-template-columns: 1fr 3fr;\n  padding: 1rem;\n  border-bottom: 2px solid #453986;\n}\n\n.temperature-wrapper {\n    cursor: pointer;\n    display: flex;\n    gap: 1rem;\n}\n\n.temperature-buttons{\n    display: grid;\n    grid-template-rows: 1fr 1fr;\n    gap: 0.5rem;\n}\n\n.temperature-buttons > .celsius, .temperature-buttons > .fahrenheit {\n    min-width: 2rem;\n    height: 2rem;\n    margin: 0;\n    padding: 0;\n}\n\n.input-text {\n  text-align: center;\n  width: 100%;\n  border: 0;\n  border-bottom: 2px solid gray;\n  outline: 0;\n  font-size: 1.3rem;\n  color: black;\n  padding: 4px 0;\n  background: transparent;\n  transition: border-color 0.2s;\n}\n\n.purple-button {\n  appearance: none;\n  background: #4338ca;\n  border: 0;\n  border-radius: 0.5rem;\n  color: #fff;\n  cursor: pointer;\n  font: inherit;\n  font-weight: 500;\n  line-height: 1;\n  padding: 1em 1.5em;\n  max-width: min-content;\n}\n\n.hidden {\n  display: none;\n}\n\n.medium-text {\n  font-size: 2rem;\n  font-weight: bold;\n}\n\n.small-text {\n  font-size: 1.2rem;\n  font-weight: 600;\n}\n\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;EACT,mBAAmB;AACrB;;AAEA;IACI,aAAa;IACb,6BAA6B;IAC7B,cAAc;IACd,eAAe;IACf,6BAA6B;IAC7B,gCAAgC;AACpC;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;EACT,aAAa;EACb,8BAA8B;EAC9B,YAAY;EACZ,mBAAmB;EACnB,qDAAqD;AACvD;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,aAAa;EACb,gCAAgC;AAClC;;AAEA;IACI,eAAe;IACf,aAAa;IACb,SAAS;AACb;;AAEA;IACI,aAAa;IACb,2BAA2B;IAC3B,WAAW;AACf;;AAEA;IACI,eAAe;IACf,YAAY;IACZ,SAAS;IACT,UAAU;AACd;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,SAAS;EACT,6BAA6B;EAC7B,UAAU;EACV,iBAAiB;EACjB,YAAY;EACZ,cAAc;EACd,uBAAuB;EACvB,6BAA6B;AAC/B;;AAEA;EACE,gBAAgB;EAChB,mBAAmB;EACnB,SAAS;EACT,qBAAqB;EACrB,WAAW;EACX,eAAe;EACf,aAAa;EACb,gBAAgB;EAChB,cAAc;EACd,kBAAkB;EAClB,sBAAsB;AACxB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,eAAe;EACf,iBAAiB;AACnB;;AAEA;EACE,iBAAiB;EACjB,gBAAgB;AAClB",sourcesContent:["#getLocation {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  align-items: center;\n}\n\n.nav-bar{\n    display: flex;\n    justify-content: space-around;\n    margin: 0.5rem;\n    padding: 1rem 0;\n    border-top: 2px solid #4338ca;\n    border-bottom: 2px solid #4338ca;\n}\n\n.weather-report {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  padding: 1rem;\n  background-color: antiquewhite;\n  margin: 1rem;\n  border-radius: 1rem;\n  box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n}\n\n.weather-report-wrapper {\n  display: grid;\n  grid-template-columns: 1fr 3fr;\n  padding: 1rem;\n  border-bottom: 2px solid #453986;\n}\n\n.temperature-wrapper {\n    cursor: pointer;\n    display: flex;\n    gap: 1rem;\n}\n\n.temperature-buttons{\n    display: grid;\n    grid-template-rows: 1fr 1fr;\n    gap: 0.5rem;\n}\n\n.temperature-buttons > .celsius, .temperature-buttons > .fahrenheit {\n    min-width: 2rem;\n    height: 2rem;\n    margin: 0;\n    padding: 0;\n}\n\n.input-text {\n  text-align: center;\n  width: 100%;\n  border: 0;\n  border-bottom: 2px solid gray;\n  outline: 0;\n  font-size: 1.3rem;\n  color: black;\n  padding: 4px 0;\n  background: transparent;\n  transition: border-color 0.2s;\n}\n\n.purple-button {\n  appearance: none;\n  background: #4338ca;\n  border: 0;\n  border-radius: 0.5rem;\n  color: #fff;\n  cursor: pointer;\n  font: inherit;\n  font-weight: 500;\n  line-height: 1;\n  padding: 1em 1.5em;\n  max-width: min-content;\n}\n\n.hidden {\n  display: none;\n}\n\n.medium-text {\n  font-size: 2rem;\n  font-weight: bold;\n}\n\n.small-text {\n  font-size: 1.2rem;\n  font-weight: 600;\n}\n\n"],sourceRoot:""}]);const c=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var A=0;A<n.length;A++){var d=[].concat(n[A]);r&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),e.push(d))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],c=0;c<n.length;c++){var s=n[c],A=r.base?s[0]+r.base:s[0],d=a[A]||0,u="".concat(A," ").concat(d);a[A]=d+1;var p=t(u),l={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)e[p].references++,e[p].updater(l);else{var m=o(l,r);r.byIndex=c,e.splice(c,0,{identifier:u,updater:m,references:1})}i.push(u)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var c=t(a[i]);e[c].references--}for(var s=r(n,o),A=0;A<a.length;A++){var d=t(a[A]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}a=s}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),r=t(795),o=t.n(r),a=t(569),i=t.n(a),c=t(565),s=t.n(c),A=t(216),d=t.n(A),u=t(589),p=t.n(u),l=t(426),m={};m.styleTagTransform=p(),m.setAttributes=s(),m.insert=i().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=d(),e()(l.Z,m),l.Z&&l.Z.locals&&l.Z.locals;const f=n=>{const e=1*n;return Math.round(100*(e-273.15)/100)},g=document.querySelector(".address"),C=document.querySelector(".date"),h=document.querySelector(".time"),b=document.querySelector(".wind"),x=document.querySelector(".humidity"),E=document.querySelector(".kelvin"),y=document.querySelector(".temperature"),B=document.querySelector(".description"),v=document.querySelector("#span-temperature"),w=(n,e)=>{g.textContent=e,C.textContent=(()=>{const n=new Date,e=n.toLocaleString("en-US",{month:"short"});return`${n.getDate()}, ${e} ${n.getFullYear()}`})(),h.textContent=(()=>{const n=new Date;return`${n.getHours()}:${n.getMinutes()}:${n.getSeconds()}`})(),b.textContent=n.wind.speed,x.textContent=n.main.humidity,E.textContent=n.main.temp,y.textContent=f(n.main.temp),B.textContent=n.weather[0].description},S={method:"GET",headers:{"X-RapidAPI-Key":"6d4ac8eda5msh9b45e76cb759b23p136c80jsn7651fcc60bad","X-RapidAPI-Host":"address-from-to-latitude-longitude.p.rapidapi.com"}},I=async n=>{try{const e=await fetch(`https://address-from-to-latitude-longitude.p.rapidapi.com/geolocationapi?address=${n}`,S),t=(await e.json()).Results[0];return{lat:t.latitude,long:t.longitude}}catch(n){return n}},q=async(n,e)=>{const t=await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${n}&lon=${e}&appid=d71489546ede021d72f1f39fb19ad36b`);return await t.json()};let k="";const T=()=>k,j=document.querySelector("#submitLocation"),L=document.querySelector(".celsius"),M=document.querySelector(".fahrenheit"),D=document.querySelector(".refresh");j.addEventListener("click",(async function(n){n.preventDefault();const e=document.forms.getLocation,t=new FormData(e);var r;e.reset(),r=t.get("address"),k=r;const o=await I(t.get("address")),a=await q(o.lat,o.long);w(a,t.get("address"))})),L.addEventListener("click",(function(){y.textContent=f(E.textContent),v.textContent="Celsius"})),M.addEventListener("click",(function(){y.textContent=(n=>{const e=9*(1*n-273.15)/5+32;return Math.round(100*e/100)})(E.textContent),v.textContent="Fahrenheit"})),D.addEventListener("click",(async()=>{const n=await I(T()),e=await q(n.lat,n.long);w(e,T())}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,